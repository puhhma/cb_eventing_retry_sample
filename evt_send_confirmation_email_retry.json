[{"appcode":"function OnUpdate(doc, meta) {\n    if (meta.id === \"allow_retrys\") {\n        // the timer is initialized by creating document with id = 'allow_retrys'\n        CreateRetryTimer({\"id\": meta.id, \"mode\": \"initial\"});\n    } else if (doc.fireRetry) {\n      // process retry documents\n      SendConfirmationMail(doc, meta.id);\n    }\n}\n\nfunction CreateRetryTimer(context) {\n    if (debug_level > 2) {\n        log('From CreateRetryTimer: creating timer', context.mode, context.id);\n    }\n    // Create a timestamp 'retryTimerInterval' seconds (from the settings) from now\n    var timerStartTime = new Date(); \n    // Get current time & add 'retryTimerInterval' sec. to it.\n    timerStartTime.setSeconds(timerStartTime.getSeconds() + retryTimerInterval);\n    // Create a document to use as out for our context\n    createTimer(RetryTimerCallback, timerStartTime, context.id, context);\n}\n\nfunction RetryTimerCallback(context) {\n    if (debug_level > 2) {\n        log('From RetryTimerCallback: timer fired', context);\n    }\n    // rearm the timer ASAP, to ensure timer keeps running in the event\n    // of later  errors or script timeouts in later \"recurring work\".\n    CreateRetryTimer({ \"id\": context.id, \"mode\": \"via_callback\" });\n\n    // Update all retry documents in the 'retry' bucket. Exclude the 'allow_retys' document \n    // and any documents that were created more than 15 seonds ago, in order to avoid retry 'to early'.\n    N1QL(\"UPDATE orders._default.retry SET fireRetry = true WHERE meta().id != 'allow_retrys' AND ts < DATE_ADD_MILLIS(NOW_MILLIS(), -15, 'second')\");\n}\n\nfunction SendConfirmationMail(retryDoc, docId) {\n  try {\n      // resolve order document by id\n      var doc = bkt_order_inbound[docId];\n      // build the request\n      var request = {\n          path: 'sendConfirmation',\n          body: doc\n      };\n      //  perform the cURL request using the URL alias from the settings\n      var response = curl('POST', curlEmailServiceHost, request);\n      if (response.status != 200) {\n          // this did not work as expected\n          if (debug_level > 1) {\n              log(\"docId\", docId, \"cURL POST failed response.status:\",response.status);\n          }\n\n        // increment attempt count in retry document\n        retryDoc.attempt = ++retryDoc.attempt;\n        // Set fireRetry = false, to avoid retry execution with this document change\n        retryDoc.fireRetry = false;\n        retryDoc.ts = Date.now();\n        // update retry document\n        bkt_order_retry[docId] = retryDoc;\n      } else {\n          if (debug_level > 5) {\n              log(\"cURL POST success, sent\",docId,\"response.body:\",response.body);\n          }\n          doc.confirmationEmailSent = true;\n          bkt_order_inbound[docId] = doc;\n          // delete the retry document\n          delete bkt_order_retry[docId];\n      }  } catch (e) {\n      log(\"ERROR cURL request had an exception:\",e)\n  }\n}\n","depcfg":{"buckets":[{"alias":"bkt_order_retry","bucket_name":"orders","scope_name":"_default","collection_name":"retry","access":"rw"},{"alias":"bkt_order_inbound","bucket_name":"orders","scope_name":"_default","collection_name":"inbound","access":"rw"}],"curl":[{"hostname":"http://192.168.1.32:9080","value":"curlEmailServiceHost","auth_type":"no-auth","username":"","password":"","bearer_key":"","allow_cookies":true,"validate_ssl_certificate":false}],"constants":[{"value":"debug_level","literal":"10"},{"value":"retryTimerInterval","literal":"20"}],"source_bucket":"orders","source_scope":"_default","source_collection":"retry","metadata_bucket":"metadata","metadata_scope":"_default","metadata_collection":"_default"},"version":"evt-7.0.0-5302-ee","enforce_schema":false,"handleruuid":692531173,"function_instance_id":"oRBSK2","appname":"evt_send_confirmation_email_retry","settings":{"cluster_stats":null,"dcp_stream_boundary":"from_now","deployment_status":false,"description":"","execution_timeout":60,"language_compatibility":"6.6.2","log_level":"INFO","n1ql_consistency":"none","num_timer_partitions":128,"processing_status":false,"timer_context_size":1024,"user_prefix":"eventing","worker_count":1}}]