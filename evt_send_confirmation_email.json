[{"appcode":"// OnUpdate is invoked for all documents created/updated in the 'inbound' bucket\nfunction OnUpdate(doc, meta) {\n    // determine if document status is 'paid' & confirmation email was not previously sent\n    if( doc.paymentStatus === \"paid\" && !doc.confirmationEmailSent ) {\n        SendConfirmationMail(doc, meta.id);\n    } else {\n      if (debug_level > 1)\n        log(\"Nothing to do for: \" + meta.id);\n    }\n}\n\nfunction SendConfirmationMail(doc, docId) {\n  try {\n      // build the request to the EmailService\n      var request = {\n          path: 'sendConfirmation',\n          body: doc\n      };\n      //  perform the cURL request using the URL alias 'curlEmailServiceHost' from the settings\n      var response = curl('POST', curlEmailServiceHost, request);\n      if (response.status != 200) {\n          // this did not work as expected\n          if (debug_level > 1) {\n              log(\"docId\", docId, \"cURL POST failed response.status:\",response.status);\n          }\n          // create retry document referencing the documentId and store in 'retry' bucket\n          bkt_order_retry[docId] = {\n              \"docId\": docId,\n              \"attempt\": 1,\n              \"ts\": Date.now()\n          }\n      } else {\n          if (debug_level > 5) {\n              log(\"cURL POST success, sent\",docId,\"response.body:\",response.body);\n          }\n          // update confirmationEmailSent status\n          doc.confirmationEmailSent = true;\n          bkt_order_inbound[docId] = doc;\n      }\n  } catch (e) {\n      log(\"ERROR cURL request had an exception:\",e)\n  }\n}\n","depcfg":{"buckets":[{"alias":"bkt_order_inbound","bucket_name":"orders","scope_name":"_default","collection_name":"inbound","access":"rw"},{"alias":"bkt_order_retry","bucket_name":"orders","scope_name":"_default","collection_name":"retry","access":"rw"}],"curl":[{"hostname":"http://192.168.1.32:9080/","value":"curlEmailServiceHost","auth_type":"no-auth","username":"","password":"","bearer_key":"","allow_cookies":true,"validate_ssl_certificate":false}],"constants":[{"value":"debug_level","literal":"10"}],"source_bucket":"orders","source_scope":"_default","source_collection":"inbound","metadata_bucket":"metadata","metadata_scope":"_default","metadata_collection":"_default"},"version":"evt-7.0.0-5302-ee","enforce_schema":false,"handleruuid":1104816165,"function_instance_id":"zObAS3","appname":"evt_send_confirmation_email","settings":{"cluster_stats":null,"dcp_stream_boundary":"from_now","deployment_status":false,"description":"","execution_timeout":60,"language_compatibility":"6.6.2","log_level":"INFO","n1ql_consistency":"none","num_timer_partitions":128,"processing_status":false,"timer_context_size":1024,"user_prefix":"eventing","worker_count":1}}]